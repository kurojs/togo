// Code generated by MockGen. DO NOT EDIT.
// Source: storage.go

// Package mock_storages is a generated GoMock package.
package mock_storages

import (
	context "context"
	sql "database/sql"
	gomock "github.com/golang/mock/gomock"
	entities "github.com/manabie-com/togo/internal/storages/entities"
	reflect "reflect"
)

// MockStorageManager is a mock of StorageManager interface
type MockStorageManager struct {
	ctrl     *gomock.Controller
	recorder *MockStorageManagerMockRecorder
}

// MockStorageManagerMockRecorder is the mock recorder for MockStorageManager
type MockStorageManagerMockRecorder struct {
	mock *MockStorageManager
}

// NewMockStorageManager creates a new mock instance
func NewMockStorageManager(ctrl *gomock.Controller) *MockStorageManager {
	mock := &MockStorageManager{ctrl: ctrl}
	mock.recorder = &MockStorageManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStorageManager) EXPECT() *MockStorageManagerMockRecorder {
	return m.recorder
}

// RetrieveTasks mocks base method
func (m *MockStorageManager) RetrieveTasks(ctx context.Context, userID, createdDate sql.NullString) ([]*entities.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RetrieveTasks", ctx, userID, createdDate)
	ret0, _ := ret[0].([]*entities.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RetrieveTasks indicates an expected call of RetrieveTasks
func (mr *MockStorageManagerMockRecorder) RetrieveTasks(ctx, userID, createdDate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RetrieveTasks", reflect.TypeOf((*MockStorageManager)(nil).RetrieveTasks), ctx, userID, createdDate)
}

// AddTask mocks base method
func (m *MockStorageManager) AddTask(ctx context.Context, t *entities.Task) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTask", ctx, t)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddTask indicates an expected call of AddTask
func (mr *MockStorageManagerMockRecorder) AddTask(ctx, t interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTask", reflect.TypeOf((*MockStorageManager)(nil).AddTask), ctx, t)
}

// ValidateUser mocks base method
func (m *MockStorageManager) ValidateUser(ctx context.Context, userID, pwd sql.NullString) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateUser", ctx, userID, pwd)
	ret0, _ := ret[0].(bool)
	return ret0
}

// ValidateUser indicates an expected call of ValidateUser
func (mr *MockStorageManagerMockRecorder) ValidateUser(ctx, userID, pwd interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateUser", reflect.TypeOf((*MockStorageManager)(nil).ValidateUser), ctx, userID, pwd)
}

// AddUser mocks base method
func (m *MockStorageManager) AddUser(ctx context.Context, userID, pwd string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUser", ctx, userID, pwd)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddUser indicates an expected call of AddUser
func (mr *MockStorageManagerMockRecorder) AddUser(ctx, userID, pwd interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUser", reflect.TypeOf((*MockStorageManager)(nil).AddUser), ctx, userID, pwd)
}
